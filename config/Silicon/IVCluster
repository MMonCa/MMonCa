string shape irregular
float density.cm3 5e22
string to   <311>
string from Void
string migration.type 3d
// coordinates axis.2 1 0 0
coordinates axis.1  0  1  0 
coordinates axis.0  0  0  1
coordinates not.in.plane 0 0 0
float axes.ratio 1
bool IV.model true
bool percolation false
float lambda         0.384

proc migration { }

proc transform.to { 
	set list ""	
	for { set size 15 } { $size < 50 } { incr size } {
		lappend list I${size} < 1e15 0 > 
	}
	return $list  
}
	
proc transform.from {
	set list ""	
	for { set size 20 } { $size < 50 } { incr size } {
		lappend list V${size} < 1e15 0 >
	}
	return $list  
}
	

proc formation {
  set list ""

  set Iener(0)      0.
  set Iener(1)      0. 
  set Iener(2)      2.40
  set Iener(3)      2.50
  set Iener(4)      2.77
  set Iener(5)      2.67
  set Iener(6)      2.48
  set Iener(7)      2.46
  set Iener(8)      3.24
  set Iener(9)      2.40
  set Iener(10)     2.69
  set Iener(11)     2.73
  set Iener(12)     2.92
  set Iener(13)     3.00
  set Iener(14)     3.06
  set Iener(15)     2.940
  set Iener(16)     2.940
  set Iener(17)     2.941
  set Iener(18)     2.941
  set Iener(19)     2.942
  set Iener(20)     2.942
  set Iener(21)     2.943
  set Iener(22)     2.943
  set Iener(23)     2.944
  set Iener(24)     2.944
  set Iener(25)     2.944
  set Iener(26)     2.945
  set Iener(27)     2.945
  set Iener(28)     2.946
  set Iener(29)     2.946
  set Iener(30)     2.947
  set Iener(31)     2.947
  set Iener(32)     2.947
  set Iener(33)     2.948
  set Iener(34)     2.948
  set Iener(35)     2.949
  set Iener(36)     2.949
  set Iener(37)     2.950
  set Iener(38)     2.950
  set Iener(39)     2.951
  set Iener(40)     2.951
  set Iener(41)     2.951
  set Iener(42)     2.952
  set Iener(43)     2.952
  set Iener(44)     2.953
  set Iener(45)     2.953
  set Iener(46)     2.954
  set Iener(47)     2.954
  set Iener(48)     2.955
  set Iener(49)     2.955
  set Iener(50)     2.955
  set Iener(51)     2.956
  set Iener(52)     2.956
  set Iener(53)     2.957
  set Iener(54)     2.957
  set Iener(55)     2.958
  set Iener(56)     2.958
  set Iener(57)     2.958
  set Iener(58)     2.959
  set Iener(59)     2.959
  set Iener(60)     2.960 
	
  set Vener(1)      0.		
  set Vener(2)      2.14
  set Vener(3)      1.96
  set Vener(4)      2.35
  set Vener(5)      3.06
  set Vener(6)      3.67
  set Vener(7)      1.54
  set Vener(8)      2.13
  set Vener(9)      3.62
  set Vener(10)     3.80	
    	
  set EfI 4
  set EfV 3.74
  set EfIV [expr ($EfI + $EfV)/2.]
  
  set form(0) 0
  set form(1) $EfI
  set Eb 0
  for { set size 0 } { $size < 50 } { incr size } {
      set EbS 2.64
      set EbL 3.17
      set a   0.75
	  if { $size > 60 } { set Eb [expr $EbL - ($EbL-$EbS)*(pow($size,$a) - pow($size-1.,$a))/(pow(2.,$a)-1.)] }
      if { $size < 61 } { set Eb $Iener($size) }	
      if { $size > 1 } {
      	lappend list I$size
      	set form($size) [expr $EfI + $form([expr $size-1]) - $Eb]
      	lappend list < $form($size) >
      }
      for { set iv 1 } { $iv < 250 } { incr iv } {
        if { $size == 0 } { lappend list V${iv}I${iv} }
      	if { $size == 1 } { lappend list V${iv}I[expr 1+$iv] }
      	if { $size >  1 } { lappend list V${iv}I[expr $size+$iv] }
	  	lappend list  < [expr $form($size) + $iv*$EfIV] >
      }
   } 
  
  set form(0) 0
  set form(1) $EfV
  for { set size 1 } { $size < 50 } { incr size } {
      set EbS 1.5
      set EbL 2.5
      set a   0.6667

      set Eb [expr $EbL - ($EbL-$EbS)*(pow($size,$a) - pow($size-1.,$a))/(pow(2.,$a)-1.)]
      if { $size < 11 } { set Eb $Vener($size) }
      if { $size > 1 } {
	  	set form($size) [expr $EfV + $form([expr $size -1]) - $Eb]	
	  	lappend list V$size
	  	lappend list < $form($size) >
      }
      for { set iv 1 } { $iv < 250 } { incr iv } {
	  	lappend list V[expr $size + $iv]I${iv}
	  	lappend list < [expr $form($size) + $iv*$EfIV] >
      }
  }
  return $list
}

proc IV.barrier {
 set prefactor   5.0e-4
 set energy(1)   0.43
 set energy(2)   0.7
 set energy(199) 1.6
 set energy(255) 2.7
 set alpha       1.0
 
 set list ""
 for { set size 0 } { $size < 50 } { incr size } {
     for { set iv 1 } { $iv < 250 } { incr iv } {
	 set pref [expr ($prefactor*pow($iv,$alpha))]
	 set ener $energy(255)
	 
	 if { $iv <= 1 } { set ener $energy(1) }
	 if { $iv == 2 } { set ener $energy(2) }
	 if { $iv <= 199 && $iv > 2 } {
	     set b [expr ($energy(199) - $energy(2))/(199. -2.)]
	     set a [expr $energy(199) - $b*199.]
	     set ener [expr $a + $b*$iv]
	 }
	 if { $iv <= 255 && $iv > 199 } {
	     set b [expr ($energy(255) - $energy(199))/(255. -199.)]
	     set a [expr $energy(255) - $b*255.]
	     set ener [expr $a + $b*$iv]
	 }
	 if { [expr $size+$iv]==$iv || [expr $size+$iv]==$size } {	 
	 	lappend list V[expr $size+$iv]I[expr $size+$iv] < $pref $ener >
	 	} else {
	 	lappend list V${iv}I[expr $size+$iv]   < $pref $ener >
	 	lappend list V[expr $size + $iv]I${iv} < $pref $ener >	 
	 	}
     }
   }
   return $list
}

proc prefactor {
  set list ""	

  for { set size 0 } { $size < 50 } { incr size } {
     #pure
     if { $size > 1 } {
		 lappend list I$size,I
		 lappend list [expr 50.*$size]
		 
		 lappend list V$size,V
		 lappend list [expr 5.*$size]
     }
     for { set iv 1 } { $iv < 250 } { incr iv } {
		 #I
		 if { $size > 0} {
		     lappend list V${iv}I[expr $size+$iv],I
		     lappend list [expr 0.0000000001*$size]
		 }
		 #V
 		 if { $size == 1 } {
		     lappend list V${iv}I[expr 1+$iv],V
		     lappend list [expr 0.0000000001*$size]
		 }
		 if { $size > 1 } {
		     lappend list V${iv}I[expr $size+$iv],V
		     lappend list [expr 0.0000000001*$size]
		 }
     }
   }
   return $list
}

